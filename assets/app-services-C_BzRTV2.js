import{i as t,g as a,a as e,b as r,c as s,q as o,w as c,d as n,e as i,f as d,s as h,h as u,j as w,k as y,u as g,l as p}from"./vendor-firebase-D18ONwfu.js";import{s as f}from"./app-utils-DBK4lIIs.js";const m=t({apiKey:"AIzaSyD4HbsUM4VnVfccf81cDQzg3fSN4zL2qY0",authDomain:"todoapp-5140d.firebaseapp.com",projectId:"todoapp-5140d",storageBucket:"todoapp-5140d.firebasestorage.app",messagingSenderId:"867891118649",appId:"1:867891118649:web:21bd8747ae62d9374d43e8",measurementId:"G-XT8S3PLZ38"});"undefined"!=typeof window&&a(m);const l=e(m),I=r(m),A="categories",C={async getUserCategories(t){try{const a=s(l,A),e=o(a,c("userId","==",t)),r=await n(e),i=[],d={};return r.forEach((t=>{const a=t.data();i.push(a.name),void 0!==a.order?d[a.name]=a.order:d[a.name]=999})),0===i.length?f.getCustomCategories():(f.set("categoriesOrder",d),i)}catch(a){throw a}},async addCustomCategory(t,a){try{const e=f.getCategoriesOrder(),r=Object.values(e).reduce(((t,a)=>Math.max(t,a)),0)+1,s=d(l,A,`${t}_${a}`);await h(s,{userId:t,name:a,order:r,createdAt:u()});const o=f.getCustomCategories();return o.includes(a)||(f.set("customCategories",[...o,a]),f.setCategoryOrder(a,r)),await this.getUserCategories(t)}catch(e){throw e}},async updateCategoryOrder(t,a,e){try{const r=d(l,A,`${t}_${a}`);return await h(r,{order:e},{merge:!0}),f.setCategoryOrder(a,e),await this.getUserCategories(t)}catch(r){throw r}},async removeCustomCategory(t,a){try{const e=d(l,A,`${t}_${a}`);await i(e);const r=f.getCustomCategories();f.set("customCategories",r.filter((t=>t!==a)));const s=f.getCategoriesOrder();return delete s[a],f.set("categoriesOrder",s),await this.getUserCategories(t)}catch(e){throw e}},async saveCategories(t,a){try{const e=s(l,A),r=o(e,c("userId","==",t)),w=await n(r),y=[];w.forEach((t=>{y.push(i(d(l,A,t.id)))})),y.length>0&&await Promise.all(y);const g=f.getCategoriesOrder()||{},p=a.map(((a,e)=>{const r=void 0!==g[a]?g[a]:1e3+e;return h(d(l,A,`${t}_${a}`),{userId:t,name:a,order:r,createdAt:u()})}));return await Promise.all(p),f.set("customCategories",a),a}catch(e){throw e}},getCategoryOrderMap:()=>({personal_care:10,meal:20,work:30,household_chores:40,transportation:50,physical_activity:60,social_interaction:70,...f.getCategoriesOrder()}),sortCategoriesByOrder(t){const a=this.getCategoryOrderMap();return[...t].sort(((t,e)=>(void 0!==a[t]?a[t]:999)-(void 0!==a[e]?a[e]:999)))}},b="sharing",k="users",U={async shareCategory(t,a,e){try{const r=o(s(l,k),c("email","==",e)),i=await n(r);if(i.empty)throw new Error("User not found");const h=i.docs[0].id;if(h===a)throw new Error("Cannot share with yourself");const g={categoryName:t,ownerUid:a,targetUid:h,targetEmail:e,createdAt:u(),updatedAt:u()},p=await w(s(l,b),g),f=o(s(l,"tasks"),c("userId","==",a),c("category","==",t)),m=await n(f),I=y(l);return m.forEach((t=>{const a=d(l,"tasks",t.id),e=t.data().sharedWith||[];e.includes(h)||I.update(a,{sharedWith:[...e,h]})})),await I.commit(),{id:p.id,...g}}catch(r){throw r}},async getSharedWithMe(t){try{const a=o(s(l,b),c("targetUid","==",t)),e=await n(a),r=[];return e.forEach((t=>{r.push({id:t.id,...t.data()})})),r}catch(a){throw a}},async getMyShares(t){try{const a=o(s(l,b),c("ownerUid","==",t)),e=await n(a),r=[];return e.forEach((t=>{r.push({id:t.id,...t.data()})})),r}catch(a){throw a}},async removeShare(t){try{return await i(d(l,b,t)),t}catch(a){throw a}},async getUserByEmail(t){try{const a=o(s(l,k),c("email","==",t)),e=await n(a);return e.empty?null:{uid:e.docs[0].id,...e.docs[0].data()}}catch(a){throw a}}},v="tasks",S={async getUserTasks(t){try{const a=o(s(l,v),c("userId","==",t)),e=await n(a),r=[];e.forEach((t=>{r.push({...t.data(),id:t.id,firebaseId:t.id})}));const i=await U.getSharedWithMe(t);for(const t of i){const a=o(s(l,v),c("userId","==",t.ownerUid),c("category","==",t.categoryName));(await n(a)).forEach((a=>{const e=a.data();r.push({...e,id:a.id,firebaseId:a.id,sharedBy:t.ownerUid,sharedByEmail:t.targetEmail,isShared:!0})}))}return r}catch(a){throw a}},async addTask(t,a){try{const e={...t,userId:a,createdAt:u(),updatedAt:u()},r=await w(s(l,v),e);return{...t,id:r.id,firebaseId:r.id}}catch(e){throw e}},async updateTask(t,a){try{const{firebaseId:e}=t;if(!e)throw new Error("Firebase ID missing");const r=d(l,v,e);return await g(r,{...t,userId:a,updatedAt:u()}),t}catch(e){throw e}},async deleteTask(t){try{return await i(d(l,v,t)),t}catch(a){throw a}},async syncTasks(t){try{const a=f.get("tasks",[]);if(0===a.length)return await this.getUserTasks(t);const e=await this.getUserTasks(t),r=y(l),o=a.filter((t=>!t.firebaseId&&!e.some((a=>a.id===t.id))&&!t.isShared));for(const n of o){const a={...n,userId:t,createdAt:u(),updatedAt:u()},e=d(s(l,v));r.set(e,a),n.firebaseId=e.id}await r.commit();const c=[...e];for(const t of a)if(t.firebaseId&&!t.isShared){const a=c.findIndex((a=>a.firebaseId===t.firebaseId));a>=0&&(c[a]=t)}else t.isShared||c.push(t);return c}catch(a){throw a}},async syncTaskList(t,a){try{const e=y(l);for(const r of t)if(r.firebaseId){const t=d(l,v,r.firebaseId);e.update(t,{...r,userId:a,updatedAt:u()})}else{const t={...r,userId:a,createdAt:u(),updatedAt:u()},o=d(s(l,v));e.set(o,t),r.firebaseId=o.id}return await e.commit(),t}catch(e){throw e}}},$="users",_={async getUserPreferences(t){try{const a=d(l,$,t),e=await p(a);return e.exists()?e.data():{theme:f.get("theme","lightWash"),language:f.get("language","pt")}}catch(a){throw a}},async saveUserPreferences(t,a){try{const e=d(l,$,t),s=r().currentUser;let o=null;s&&s.email&&(o=s.email);const c={...a,updatedAt:u()};return o&&(c.email=o),await h(e,c,{merge:!0}),a}catch(e){throw e}},async updatePreference(t,a,e){try{const s=d(l,$,t),o=await p(s),c={[a]:e,updatedAt:u()};if(!o.exists()||!o.data().email){const t=r().currentUser;t&&t.email&&(c.email=t.email)}return await h(s,c,{merge:!0}),{[a]:e}}catch(s){throw s}},async ensureUserEmail(t){try{const a=d(l,$,t),e=await p(a);if(e.exists()&&e.data().email)return e.data().email;const s=r().currentUser;return s&&s.email?(await h(a,{email:s.email,updatedAt:u()},{merge:!0}),s.email):null}catch(a){throw a}}};export{I as a,C as c,U as s,S as t,_ as u};
