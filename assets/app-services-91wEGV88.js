import{i as t,g as e,a,b as r,q as s,c as o,w as i,d as c,e as d,f as n,s as h,h as u,j as g,k as w,u as y,l as m}from"./vendor-firebase-Da0mNW5k.js";import{s as f}from"./app-utils-Cm9Jlpz9.js";const l=t({apiKey:"AIzaSyD4HbsUM4VnVfccf81cDQzg3fSN4zL2qY0",authDomain:"todoapp-5140d.firebaseapp.com",projectId:"todoapp-5140d",storageBucket:"todoapp-5140d.firebasestorage.app",messagingSenderId:"867891118649",appId:"1:867891118649:web:4e7ab2480aa50a884d43e8",measurementId:"G-W1QWEMVE3X"});"undefined"!=typeof window&&e(l);const p=a(l),I=r(l),C="sharing",U="users",b={async shareCategory(t,e,a){try{const r=s(o(p,U),i("email","==",a)),d=await c(r);if(d.empty)throw new Error("User not found");const w=d.docs[0].id;if(w===e)throw new Error("Cannot share with yourself");const y={categoryName:t,ownerUid:e,targetUid:w,targetEmail:a,createdAt:h(),updatedAt:h()},m=await u(o(p,C),y),f=s(o(p,"tasks"),i("userId","==",e),i("category","==",t)),l=await c(f),I=g(p);return l.forEach((t=>{const e=n(p,"tasks",t.id),a=t.data().sharedWith||[];a.includes(w)||I.update(e,{sharedWith:[...a,w]})})),await I.commit(),{id:m.id,...y}}catch(r){throw r}},async getSharedWithMe(t){try{const e=s(o(p,C),i("targetUid","==",t)),a=await c(e),r=[];return a.forEach((t=>{r.push({id:t.id,...t.data()})})),r}catch(e){throw e}},async getMyShares(t){try{const e=s(o(p,C),i("ownerUid","==",t)),a=await c(e),r=[];return a.forEach((t=>{r.push({id:t.id,...t.data()})})),r}catch(e){throw e}},async removeShare(t){try{return await d(n(p,C,t)),t}catch(e){throw e}},async getUserByEmail(t){try{const e=s(o(p,U),i("email","==",t)),a=await c(e);return a.empty?null:{uid:a.docs[0].id,...a.docs[0].data()}}catch(e){throw e}}},E="categories",k={async getUserCategories(t){try{const e=o(p,E),a=s(e,i("userId","==",t)),r=await c(a),d=[],n={};return r.forEach((t=>{const e=t.data();d.push(e.name),void 0!==e.order?n[e.name]=e.order:n[e.name]=999})),0===d.length?f.getCustomCategories():(f.set("categoriesOrder",n),d)}catch(e){throw e}},async addCustomCategory(t,e){try{const a=f.getCategoriesOrder(),r=Object.values(a).reduce(((t,e)=>Math.max(t,e)),0)+1,s=n(p,E,`${t}_${e}`);await w(s,{userId:t,name:e,order:r,createdAt:h()});const o=f.getCustomCategories();return o.includes(e)||(f.set("customCategories",[...o,e]),f.setCategoryOrder(e,r)),await this.getUserCategories(t)}catch(a){throw a}},async updateCategoryOrder(t,e,a){try{const r=n(p,E,`${t}_${e}`);return await w(r,{order:a},{merge:!0}),f.setCategoryOrder(e,a),await this.getUserCategories(t)}catch(r){throw r}},async removeCustomCategory(t,e){try{const a=n(p,E,`${t}_${e}`);await d(a);const r=f.getCustomCategories();f.set("customCategories",r.filter((t=>t!==e)));const s=f.getCategoriesOrder();return delete s[e],f.set("categoriesOrder",s),await this.getUserCategories(t)}catch(a){throw a}},getCategoryOrderMap:()=>({personal_care:10,meal:20,work:30,household_chores:40,transportation:50,physical_activity:60,social_interaction:70,...f.getCategoriesOrder()}),sortCategoriesByOrder(t){const e=this.getCategoryOrderMap();return[...t].sort(((t,a)=>(void 0!==e[t]?e[t]:999)-(void 0!==e[a]?e[a]:999)))}},A="tasks",O={async getUserTasks(t){try{const e=s(o(p,A),i("userId","==",t)),a=await c(e),r=[];a.forEach((t=>{r.push({...t.data(),id:t.id,firebaseId:t.id})}));const d=await b.getSharedWithMe(t);for(const t of d){const e=s(o(p,A),i("userId","==",t.ownerUid),i("category","==",t.categoryName));(await c(e)).forEach((e=>{const a=e.data();r.push({...a,id:e.id,firebaseId:e.id,sharedBy:t.ownerUid,sharedByEmail:t.targetEmail,isShared:!0})}))}return r}catch(e){throw e}},async addTask(t,e){try{const a={...t,userId:e,createdAt:h(),updatedAt:h()},r=await u(o(p,A),a);return{...t,id:r.id,firebaseId:r.id}}catch(a){throw a}},async updateTask(t,e){try{const{firebaseId:a}=t;if(!a)throw new Error("Firebase ID missing");const r=n(p,A,a);return await y(r,{...t,userId:e,updatedAt:h()}),t}catch(a){throw a}},async deleteTask(t){try{return await d(n(p,A,t)),t}catch(e){throw e}},async syncTasks(t){try{const e=f.get("tasks",[]);if(0===e.length)return await this.getUserTasks(t);const a=await this.getUserTasks(t),r=g(p),s=e.filter((t=>!t.firebaseId&&!a.some((e=>e.id===t.id))&&!t.isShared));for(const c of s){const e={...c,userId:t,createdAt:h(),updatedAt:h()},a=n(o(p,A));r.set(a,e),c.firebaseId=a.id}await r.commit();const i=[...a];for(const t of e)if(t.firebaseId&&!t.isShared){const e=i.findIndex((e=>e.firebaseId===t.firebaseId));e>=0&&(i[e]=t)}else t.isShared||i.push(t);return i}catch(e){throw e}},async syncTaskList(t,e){try{const a=g(p);for(const r of t)if(r.firebaseId){const t=n(p,A,r.firebaseId);a.update(t,{...r,userId:e,updatedAt:h()})}else{const t={...r,userId:e,createdAt:h(),updatedAt:h()},s=n(o(p,A));a.set(s,t),r.firebaseId=s.id}return await a.commit(),t}catch(a){throw a}}},S="users",v={async getUserPreferences(t){try{const e=n(p,S,t),a=await m(e);return a.exists()?a.data():{theme:f.get("theme","lightWash"),language:f.get("language","pt")}}catch(e){throw e}},async saveUserPreferences(t,e){try{const a=n(p,S,t),s=r().currentUser;let o=null;s&&s.email&&(o=s.email);const i={...e,updatedAt:h()};return o&&(i.email=o),await w(a,i,{merge:!0}),e}catch(a){throw a}},async updatePreference(t,e,a){try{const s=n(p,S,t),o=await m(s),i={[e]:a,updatedAt:h()};if(!o.exists()||!o.data().email){const t=r().currentUser;t&&t.email&&(i.email=t.email)}return await w(s,i,{merge:!0}),{[e]:a}}catch(s){throw s}},async ensureUserEmail(t){try{const e=n(p,S,t),a=await m(e);if(a.exists()&&a.data().email)return a.data().email;const s=r().currentUser;return s&&s.email?(await w(e,{email:s.email,updatedAt:h()},{merge:!0}),s.email):null}catch(e){throw e}}};export{I as a,k as c,b as s,O as t,v as u};
