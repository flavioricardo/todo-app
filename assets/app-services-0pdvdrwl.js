import{i as e,g as t,a,b as r,d as s,c as o,s as c,e as d,f as i,q as n,w as g,h as u,j as h,u as y,k as f,l as p}from"./vendor-firebase-d_gnxxo4.js";import{s as w}from"./app-utils-DKuicV5P.js";const m=e({apiKey:"AIzaSyD4HbsUM4VnVfccf81cDQzg3fSN4zL2qY0",authDomain:"todoapp-5140d.firebaseapp.com",projectId:"todoapp-5140d",storageBucket:"todoapp-5140d.firebasestorage.app",messagingSenderId:"867891118649",appId:"1:867891118649:web:4e7ab2480aa50a884d43e8",measurementId:"G-W1QWEMVE3X"});"undefined"!=typeof window&&t(m);const I=a(m),C=r(m),b="categories",l={async getUserCategories(e){try{const t=i(I,b),a=n(t,g("userId","==",e)),r=await u(a),s=[],o={};return r.forEach((e=>{const t=e.data();s.push(t.name),void 0!==t.order?o[t.name]=t.order:o[t.name]=999})),0===s.length?w.getCustomCategories():(w.set("categoriesOrder",o),s)}catch(t){throw t}},async addCustomCategory(e,t){try{const a=w.getCategoriesOrder(),r=Object.values(a).reduce(((e,t)=>Math.max(e,t)),0)+1,o=s(I,b,`${e}_${t}`);await c(o,{userId:e,name:t,order:r,createdAt:d()});const i=w.getCustomCategories();return i.includes(t)||(w.set("customCategories",[...i,t]),w.setCategoryOrder(t,r)),await this.getUserCategories(e)}catch(a){throw a}},async updateCategoryOrder(e,t,a){try{const r=s(I,b,`${e}_${t}`);return await c(r,{order:a},{merge:!0}),w.setCategoryOrder(t,a),await this.getUserCategories(e)}catch(r){throw r}},async removeCustomCategory(e,t){try{const a=s(I,b,`${e}_${t}`);await o(a);const r=w.getCustomCategories();w.set("customCategories",r.filter((e=>e!==t)));const c=w.getCategoriesOrder();return delete c[t],w.set("categoriesOrder",c),await this.getUserCategories(e)}catch(a){throw a}},getCategoryOrderMap:()=>({personal_care:10,meal:20,work:30,household_chores:40,transportation:50,physical_activity:60,social_interaction:70,...w.getCategoriesOrder()}),sortCategoriesByOrder(e){const t=this.getCategoryOrderMap();return[...e].sort(((e,a)=>(void 0!==t[e]?t[e]:999)-(void 0!==t[a]?t[a]:999)))}},k="tasks",A={async getUserTasks(e){try{const t=n(i(I,k),g("userId","==",e)),a=await u(t),r=[];return a.forEach((e=>{r.push({...e.data(),id:e.id,firebaseId:e.id})})),r}catch(t){throw t}},async addTask(e,t){try{const a={...e,userId:t,createdAt:d(),updatedAt:d()},r=await f(i(I,k),a);return{...e,id:r.id,firebaseId:r.id}}catch(a){throw a}},async updateTask(e,t){try{const{firebaseId:a}=e;if(!a)throw new Error("Firebase ID missing");const r=s(I,k,a);return await y(r,{...e,userId:t,updatedAt:d()}),e}catch(a){throw a}},async deleteTask(e){try{return await o(s(I,k,e)),e}catch(t){throw t}},async syncTasks(e){try{const t=w.get("tasks",[]);if(0===t.length)return await this.getUserTasks(e);const a=await this.getUserTasks(e),r=h(I),o=t.filter((e=>!e.firebaseId&&!a.some((t=>t.id===e.id))));for(const n of o){const t={...n,userId:e,createdAt:d(),updatedAt:d()},a=s(i(I,k));r.set(a,t),n.firebaseId=a.id}await r.commit();const c=[...a];for(const e of t)if(e.firebaseId){const t=c.findIndex((t=>t.firebaseId===e.firebaseId));t>=0&&(c[t]=e)}else c.push(e);return c}catch(t){throw t}},async syncTaskList(e,t){try{const a=h(I);for(const r of e)if(r.firebaseId){const e=s(I,k,r.firebaseId);a.update(e,{...r,userId:t,updatedAt:d()})}else{const e={...r,userId:t,createdAt:d(),updatedAt:d()},o=s(i(I,k));a.set(o,e),r.firebaseId=o.id}return await a.commit(),e}catch(a){throw a}}},O="users",U={async getUserPreferences(e){try{const t=s(I,O,e),a=await p(t);return a.exists()?a.data():{theme:w.get("theme","lightWash"),language:w.get("language","pt")}}catch(t){throw t}},async saveUserPreferences(e,t){try{const a=s(I,O,e);return await c(a,{...t,updatedAt:d()},{merge:!0}),t}catch(a){throw a}},async updatePreference(e,t,a){try{const r=s(I,O,e);return await c(r,{[t]:a,updatedAt:d()},{merge:!0}),{[t]:a}}catch(r){throw r}}};export{C as a,l as c,A as t,U as u};
